/*=========================================================================

   Program: ParaView
   Module:    pqLiveDataPanel.cxx

   Copyright (c) 2005-2008 Sandia Corporation, Kitware Inc.
   All rights reserved.

   ParaView is a free software; you can redistribute it and/or modify it
   under the terms of the ParaView license version 1.2. 

   See License_v1.2.txt for the full ParaView license.
   A copy of this license can be obtained by contacting
   Kitware Inc.
   28 Corporate Drive
   Clifton Park, NY 12065
   USA

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE AUTHORS OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

========================================================================*/
#include "pqLiveDataPanel.h"
#include "ui_pqLiveDataPanel.h"

// Server Manager Includes.
#include "vtkEventQtSlotConnect.h"
#include "vtkSMProxyManager.h"
#include "vtkSMSourceProxy.h"
#include "vtkSmartPointer.h"
#include "vtkSMCPStateLoader.h"
#include "vtkSMPropertyHelper.h"
#include "vtkSMStringVectorProperty.h"
#include "vtkSMDoubleVectorProperty.h"
#include "vtkProcessModule.h"
#include "vtkSMCPStateLoader.h"
#include "vtkClientServerStream.h"
#include "vtkWeakPointer.h"
#include "vtkPVXMLElement.h"
#include "vtkSMIntVectorProperty.h"
#include "vtkSMPropertyIterator.h"
#include "vtkSMProxyProperty.h"

#include <vtksys/ios/sstream>

// Qt Includes.
#include <QFile>
#include <QPointer>
#include <QTimer>

// ParaView Includes.
#include "pqActiveObjects.h"
#include "pqServer.h"
#include "pqActiveObjects.h"
#include "pqPipelineSource.h"
#include "pqLoadDataReaction.h"
#include "pqSourcesMenuReaction.h"
#include "pqPVApplicationCore.h"
#include "pqAnimationManager.h"
#include "pqAnimationScene.h"
#include "pqAutoGeneratedObjectPanel.h"
#include "pqObjectPanelInterface.h"
#include "pqObjectInspectorWidget.h"
#include "pqProxy.h"

class pqLiveDataPanel::pqInternal : public Ui::pqLiveDataPanel
{
public:

  pqInternal()
    {
    this->LastTime = 0;
    this->ProxyPanel = 0;
    this->PropertyPanel = 0;
    }

//  vtkEventQtSlotConnect* VTKConnect;
  QWidget* ProxyPanel;
  pqObjectPanel* PropertyPanel;
  vtkSmartPointer<vtkSMProxy> FileSetProxy;
  vtkWeakPointer<vtkSMSourceProxy> LiveSource;
  vtkWeakPointer<vtkSMSourceProxy> LiveReader;
  vtkSmartPointer<vtkSMCPStateLoader> Loader;
  QTimer* Timer;
  double LastTime;

};


//-----------------------------------------------------------------------------
pqLiveDataPanel::pqLiveDataPanel(QWidget* p):Superclass(p)
{
  //this->VTKConnect = vtkEventQtSlotConnect::New();

  this->Internal = new pqInternal();
  this->Internal->setupUi(this);

  this->connect(this->Internal->startButton, SIGNAL(clicked()),
                SLOT(onStartClicked()));
  this->connect(this->Internal->stopButton, SIGNAL(clicked()),
                SLOT(onStopClicked()));
  this->connect(this->Internal->createButton, SIGNAL(clicked()),
                SLOT(onCreateClicked()));
  this->connect(this->Internal->useDiskRadio, SIGNAL(toggled(bool)),
                SLOT(onModeChanged()));

  this->connect(this->Internal->timeStepList, SIGNAL(itemActivated(QListWidgetItem*)),
                SLOT(onItemActivated(QListWidgetItem*)));
  
  this->Internal->Timer = new QTimer(this);
  this->Internal->Timer->setSingleShot(true);
  this->Internal->Timer->setInterval(250);
  this->connect(this->Internal->Timer, SIGNAL(timeout()), SLOT(onTimeOut()));
}

//-----------------------------------------------------------------------------
pqLiveDataPanel::~pqLiveDataPanel()
{
  delete this->Internal;
  this->Internal = 0;
}

//-----------------------------------------------------------------------------
bool pqLiveDataPanel::snapToLatestTimeStep()
{
  return this->Internal->snapToLatestCheckBox->isChecked();
}

//-----------------------------------------------------------------------------
void pqLiveDataPanel::onModeChanged()
{
  this->refreshWidgetStates();
}

//-----------------------------------------------------------------------------
void pqLiveDataPanel::onItemActivated(QListWidgetItem* item)
{
  if (this->Internal->ProxyPanel)
    {
    delete this->Internal->ProxyPanel;
    this->Internal->ProxyPanel = 0;
    this->Internal->PropertyPanel = 0;
    }

  int row = this->Internal->timeStepList->currentRow();
  vtkSMSourceProxy* source = this->Internal->Loader->GetSource(row);
  if (source)
    {
    pqProxy* pqproxy = new pqProxy("sources", item->text(), source, NULL);

    pqObjectPanelInterface* panelFactory = pqObjectInspectorWidget::newStandardPanelsFactory();

    QWidget* proxyPanel = new QWidget();
    QVBoxLayout* layout = new QVBoxLayout(proxyPanel);

    pqObjectPanel* panel = 0;
    if (panelFactory->canCreatePanel(pqproxy))
      {
      panel = panelFactory->createPanel(pqproxy, proxyPanel);
      }
    else
      {
      panel = new pqAutoGeneratedObjectPanel(pqproxy, proxyPanel);
      }


    QPushButton* acceptButton = new QPushButton("Accept", proxyPanel);
    layout->addWidget(acceptButton);
    layout->addWidget(panel);

    this->Internal->ProxyPanel = proxyPanel;
    this->Internal->PropertyPanel = panel;
    proxyPanel->show();

    this->connect(acceptButton, SIGNAL(clicked()),
                  SLOT(onAcceptChanges()));
    }
}

#include <vtkstd/set>
class pqProxySet : public vtkstd::set<vtkSMProxy*> {};

//---------------------------------------------------------------------------
void collectReferredProxies(pqProxySet& setOfProxies, vtkSMProxy* proxy)
{
  vtkSmartPointer<vtkSMPropertyIterator> iter;
  iter.TakeReference(proxy->NewPropertyIterator());
  for (iter->Begin(); !iter->IsAtEnd(); iter->Next())
    {
    vtkSMProxyProperty* pp = vtkSMProxyProperty::SafeDownCast(
      iter->GetProperty());
    for (unsigned int cc=0; pp && (pp->GetNumberOfProxies() > cc); cc++)
      {
      vtkSMProxy* referredProxy = pp->GetProxy(cc);
      if (referredProxy)
        {
        setOfProxies.insert(referredProxy);
        collectReferredProxies(setOfProxies, referredProxy);
        }
      }
    }
}

//-----------------------------------------------------------------------------
void pqLiveDataPanel::onAcceptChanges()
{
  if (this->Internal->PropertyPanel)
    {
    this->Internal->PropertyPanel->accept();
    if (this->Internal->LiveSource && this->Internal->Loader)
      {
      vtkSMStringVectorProperty* stringProp = 
        vtkSMStringVectorProperty::SafeDownCast(this->Internal->LiveSource->GetProperty("CPStateSend"));
      if (stringProp)
        {

        vtkPVXMLElement* elem = vtkPVXMLElement::New();
        elem->SetName("states");

        vtkSMProxy* proxy = this->Internal->PropertyPanel->referenceProxy()->getProxy();
        proxy->SaveState(elem);

        pqProxySet referredProxies;
        collectReferredProxies(referredProxies, proxy);

        for (pqProxySet::iterator itr = referredProxies.begin(); itr != referredProxies.end(); ++itr)
          {
          (*itr)->SaveState(elem);
          }

        vtksys_ios::ostringstream ostr;
        elem->PrintXML(ostr, vtkIndent());
        elem->PrintXML();
        stringProp->SetElement(0, ostr.str().c_str());
        elem->Delete();
        this->Internal->LiveSource->UpdateProperty("CPStateSend");
        }
      }
    }
}


//-----------------------------------------------------------------------------
void pqLiveDataPanel::onStartClicked()
{

  this->Internal->startButton->setEnabled(false);
  this->Internal->stopButton->setEnabled(true);

  if (this->Internal->useDiskRadio->isChecked() && !this->Internal->FileSetProxy)
    {

    vtkSMProxyManager* proxyManager = vtkSMProxyManager::GetProxyManager();
    this->Internal->FileSetProxy = vtkSmartPointer<vtkSMProxy>::Take(
      proxyManager->NewProxy("file_listing", "FileSet"));

    pqServer* activeServer = pqActiveObjects::instance().activeServer();

    this->Internal->FileSetProxy->SetConnectionID(activeServer->GetConnectionID());
    this->Internal->FileSetProxy->SetServers(vtkProcessModule::DATA_SERVER_ROOT);

    QString baseDir = this->Internal->directoryEdit->text();
    vtkSMPropertyHelper(this->Internal->FileSetProxy, "BaseDirectory").Set(baseDir.toAscii().data());
    this->Internal->FileSetProxy->UpdateProperty("BaseDirectory");
    }



  this->Internal->Timer->start();
}

//-----------------------------------------------------------------------------
void pqLiveDataPanel::onStopClicked()
{
  this->Internal->Timer->stop();
  this->Internal->startButton->setEnabled(true);
  this->Internal->stopButton->setEnabled(false);
  //this->Internal->FileSetProxy = 0;
}

//-----------------------------------------------------------------------------
void pqLiveDataPanel::onTimeOut()
{

  if (!this->Internal->stopButton->isEnabled())
    {
    return;
    }

  if (this->Internal->useDiskRadio->isChecked())
    {

    this->Internal->FileSetProxy->InvokeCommand("Poll");
    this->Internal->FileSetProxy->UpdatePropertyInformation(
      this->Internal->FileSetProxy->GetProperty("FileList"));

    int row = this->Internal->timeStepList->currentRow();
    this->Internal->timeStepList->clear();
    vtkSMStringVectorProperty* prop = vtkSMStringVectorProperty::SafeDownCast(
      this->Internal->FileSetProxy->GetProperty("FileList"));
    int nFiles = prop->GetNumberOfElements();
    for (int i = 0; i < nFiles; ++i)
      {
      this->Internal->timeStepList->addItem(prop->GetElement(i));
      }
    this->Internal->timeStepList->setCurrentRow(row);


    if (this->Internal->LiveReader)
      {

      this->Internal->LiveReader->UpdatePipelineInformation();
      vtkSMDoubleVectorProperty* prop = vtkSMDoubleVectorProperty::SafeDownCast(
        this->Internal->LiveReader->GetProperty("TimestepValues"));

      if (prop)
        {
        double lastTime = 0;
        this->Internal->LiveReader->UpdatePropertyInformation(prop);
        int nElements = prop->GetNumberOfElements();
        if (nElements)
          {
          lastTime = prop->GetElement(nElements-1);
          }

        if (lastTime != this->Internal->LastTime)
          {
          if (this->snapToLatestTimeStep())
            {
            pqPVApplicationCore::instance()->animationManager()->
              getActiveScene()->getProxy()->InvokeCommand("GoToLast");
            }
          }
        this->Internal->LastTime = lastTime;
        }
      }


    }

  else
    {
    
    if (this->Internal->LiveSource)
      {
      this->Internal->LiveSource->InvokeCommand("Poll");
      this->Internal->LiveSource->UpdatePipelineInformation();

      vtkSMDoubleVectorProperty* prop = vtkSMDoubleVectorProperty::SafeDownCast(
        this->Internal->LiveSource->GetProperty("TimestepValues"));

      if (prop)
        {

        //printf("updating timesteps property information...\n");
        double lastTime = 0;
        this->Internal->LiveSource->UpdatePropertyInformation(prop);
        int nElements = prop->GetNumberOfElements();
        if (nElements)
          {
          lastTime = prop->GetElement(nElements-1);
          }

        //printf("--lastTime is: %f\n", lastTime);

        if (lastTime != this->Internal->LastTime)
          {
          //printf("  new data, next frame\n");

          if (this->snapToLatestTimeStep())
            {
            //printf("    call GoToLast\n");
            pqPVApplicationCore::instance()->animationManager()->
              getActiveScene()->getProxy()->InvokeCommand("GoToLast");
            }

          }

        this->Internal->LastTime = lastTime;
        }

      vtkSMStringVectorProperty* stateProp = vtkSMStringVectorProperty::SafeDownCast(
        this->Internal->LiveSource->GetProperty("CPState"));
      this->Internal->LiveSource->UpdatePropertyInformation(stateProp);

      if (stateProp->GetNumberOfElements() && !this->Internal->timeStepList->count())
        {
        this->Internal->Loader = vtkSmartPointer<vtkSMCPStateLoader>::New();
        this->Internal->Loader->Go(stateProp->GetElement(0));

        int row = this->Internal->timeStepList->currentRow();
        this->Internal->timeStepList->clear();
        for (int i = 0; i < this->Internal->Loader->GetNumberOfSources(); ++i)
          {
          QString xmlLabel = this->Internal->Loader->GetSource(i)->GetXMLLabel();
          if (xmlLabel != "Trivial Producer")
            {
            this->Internal->timeStepList->addItem(xmlLabel);
            }
          }
        this->Internal->timeStepList->setCurrentRow(row);
        }

      }

    }

  this->refreshWidgetStates();

  this->Internal->Timer->start();
}

//-----------------------------------------------------------------------------
void pqLiveDataPanel::refreshWidgetStates()
{
  if (this->Internal->useDiskRadio->isChecked())
    {
    this->Internal->createButton->setEnabled(
      this->Internal->timeStepList->currentItem() != 0);
    }
  else
    {
    this->Internal->createButton->setEnabled(true);
    }
}

//-----------------------------------------------------------------------------
void pqLiveDataPanel::onCreateClicked()
{

  if (this->Internal->useDiskRadio->isChecked())
    {

    if (!this->Internal->timeStepList->currentItem())
      {
      return;
      }

    QStringList files;
    QString currentFile = this->Internal->timeStepList->currentItem()->text();

    if (!currentFile.length())
      {
      return;
      }

    //currentFile = this->Internal->directoryEdit->text() + "/" + currentFile;
    files.append(currentFile);
    pqPipelineSource* source = pqLoadDataReaction::loadData(files);

    if (!source)
      {
      return;
      }

    vtkSMProxy* proxy = source->getProxy();
    if (!proxy->IsA("vtkSMFileSeriesReaderProxy"))
      {
      printf("this reader is not compatible with live data.\n");
      return;
      }

    this->Internal->LiveReader = proxy;

    vtkProcessModule* pm = vtkProcessModule::GetProcessModule();
    vtkClientServerStream stream;
    stream << vtkClientServerStream::Invoke 
           << proxy->GetID() << "SetFileSet" << this->Internal->FileSetProxy->GetID() 
           << vtkClientServerStream::End;
    pm->SendStream(proxy->GetConnectionID(), proxy->GetServers(), stream);
    }

  else
    {

    pqPipelineSource* source = pqSourcesMenuReaction::createSource(
      "sources", "LiveDataSource");
    source->getProxy()->InvokeCommand("Listen");
    this->Internal->LiveSource = vtkSMSourceProxy::SafeDownCast(source->getProxy());

    }


}
